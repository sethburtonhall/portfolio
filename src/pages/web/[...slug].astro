---
import { type CollectionEntry, getCollection } from "astro:content";
import { Picture } from "astro:assets";

import { getGithubRepos, type GithubRepo } from "@/lib/utils";

import BaseLayout from "@/layouts/BaseLayout.astro";
import Hero from "@/components/Hero.astro";
import Pill from "@/components/Pill.astro";
import Icon from "@/components/Icon.astro";
import ContactCTA from "@/components/ContactCTA.astro";

interface Props {
  entry: CollectionEntry<"web">;
  showcases: GithubRepo[];
  shortstacks: GithubRepo[];
}

type RepoProps = Pick<Props, "showcases" | "shortstacks">;

export async function getStaticPaths() {
  const { showcases, shortstacks }: RepoProps = await getGithubRepos();

  const web = await getCollection("web");
  return web.map((entry: { slug: any }) => ({
    params: {
      slug: entry.slug,
    },
    props: {
      entry,
      showcases,
      shortstacks,
    },
  }));
}

const { entry, showcases, shortstacks } = Astro.props;
const { Content } = await entry.render();

// Helper function to find repo data
const findRepoData = (repoTitle: string) => {
  return (
    showcases.find((repo) => repo.name === repoTitle) ||
    shortstacks.find((repo) => repo.name === repoTitle)
  );
};

const repoData = findRepoData(entry.data.title);

const description = repoData?.description || entry.data.description;
const url = repoData?.homepage || entry.data.url;
const githubUrl = repoData?.html_url || entry.data.github;
const topics = repoData?.topics || entry.data.tags;

// capitalize the first letter of each topic
const capitalizedTopics = topics?.map(
  (tag: string) => tag.charAt(0).toUpperCase() + tag.slice(1),
);
// filter out the showcase and shortstack tags on Github
const filteredTopics = capitalizedTopics?.filter(
  (tag: string) => tag !== "Showcase" && tag !== "Shortstack",
);

// format the title to uppercase dks and replace the dashes with spaces and capitalize the first letter of each word
const formattedTitle = entry.data.title
  // reformat specific titles
  .replace(/tip-top/g, "TipTop")
  .replace(/dks-/g, "DKS ")
  .replace(/-hd/g, " H.D.")
  // replace - with space
  .replace(/-/g, " ")
  // capitalize the first letter of each word
  .replace(/\b\w/g, (c: any) => c.toUpperCase());

// format the topics to change -api to API
const formattedTopics = filteredTopics?.map((tag: string) =>
  tag
    // if includes js at end replace with .js
    .replace(/js$/g, ".js")
    .replace(/Shadcn-ui/g, "shadcn/ui")
    .replace(/-ui/g, " UI")
    .replace(/-api/g, " API")
    .replace(/cms/g, " CMS")
    .replace(/Buildinpublic/g, "Build In Public")
    .replace(/Aws/g, "AWS")
    .replace(/-/g, " "),
);
---

<BaseLayout title={formattedTitle} description={description}>
  <div class="stack gap-20">
    <div class="stack gap-16">
      <header>
        <div class="stack container gap-2">
          <a class="back-link" href="/web/"
            ><Icon icon="arrowLeft" /> Web Projects</a
          >
          <Hero
            title={formattedTitle}
            tagline={description}
            url={url}
            githubUrl={githubUrl}
          >
            <div class="details w-full">
              <div class="tags">
                {formattedTopics?.map((t: unknown) => <Pill>{t}</Pill>)}
              </div>
            </div>
          </Hero>
        </div>
      </header>
      <main class="container">
        <div class="stack content gap-10">
          {
            entry.data.img && (
              <Picture
                src={entry.data.img}
                alt={entry.data.img_alt || ""}
                width={1600}
                height={900}
                loading="eager"
                class="aspect-video object-cover"
              />
            )
          }
          <div
            class="prose-a:gradient-text prose prose-lg mx-auto p-2 lg:prose-xl prose-headings:text-zinc-900 prose-p:text-zinc-900 prose-blockquote:border-l-4 prose-blockquote:bg-fuchsia-500 prose-blockquote:bg-opacity-50 prose-blockquote:px-6 prose-blockquote:py-2 prose-blockquote:font-brand prose-blockquote:text-sm prose-blockquote:text-accent prose-strong:text-zinc-900 prose-ul:text-zinc-900 prose-img:border-4 prose-img:border-fuchsia-500 dark:prose-headings:text-zinc-100 dark:prose-p:text-zinc-100 dark:prose-strong:text-zinc-100 dark:prose-ul:text-zinc-100"
          >
            <Content />
          </div>
        </div>
      </main>
    </div>
    <ContactCTA />
  </div>
</BaseLayout>

<style>
  header {
    padding-bottom: 2.5rem;
    border-bottom: 1px solid var(--stone-500);
  }

  .back-link {
    display: none;
  }

  .details {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    justify-content: space-between;
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 0.5rem;
  }

  .content {
    max-width: 65ch;
    margin-inline: auto;
  }

  .content > :global(* + *) {
    margin-top: 1rem;
  }

  .content :global(h1),
  .content :global(h2),
  .content :global(h3),
  .content :global(h4),
  .content :global(h5) {
    margin: 1.5rem 0;
  }

  .content :global(img) {
    border-radius: 1rem;
    box-shadow: var(--shadow-sm);
    background: var(--gradient-subtle);
    border: 1px solid var(--stone-800);
  }

  .content :global(blockquote) {
    /* font-size: var(--text-lg); */
    font-family: var(--font-brand);
    font-weight: 600;
    line-height: 1.1;
    padding-inline-start: 1.5rem;
    border-inline-start: 0.25rem solid var(--accent-dark);
    color: var(--stone-0);
  }

  .back-link,
  .content :global(a) {
    text-decoration: 1px solid underline transparent;
    text-underline-offset: 0.25em;
    transition: text-decoration-color var(--theme-transition);
  }

  .back-link:hover,
  .back-link:focus,
  .content :global(a:hover),
  .content :global(a:focus) {
    text-decoration-color: currentColor;
  }

  @media (min-width: 50em) {
    .back-link {
      display: block;
      align-self: flex-start;
    }

    .details {
      flex-direction: column;
      gap: 2.5rem;
      align-items: start;
    }

    .tags {
      justify-content: start;
    }
  }

  @media (min-width: 70em) {
    .details {
      flex-direction: row;
    }
  }
</style>
