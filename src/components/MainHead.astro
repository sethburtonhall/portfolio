---
import "@/styles/global.css";
import { SEO } from "astro-seo";

interface Props {
  title?: string | undefined;
  description?: string | undefined;
}

const { title = "Seth Hall Creative", description = "Seth Hall Creative" } =
  Astro.props;

const image = "/social_card.png";
const siteTitle = "Seth Hall Creative";
const siteDescription =
  "The online portfolio of Seth Hall, a web developer and creative producer.";
---

<meta charset="UTF-8" />
<meta name="description" property="og:description" content={description} />
<meta name="viewport" content="width=device-width" />
<meta name="generator" content={Astro.generator} />
<title>{title}</title>

<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
  href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,400;0,700;1,400&family=Rubik:wght@500;600&display=swap"
  rel="stylesheet"
/>

<SEO
  title={siteTitle}
  description={siteDescription}
  openGraph={{
    basic: {
      title: siteTitle,
      type: "website",
      image: image,
      url: "https://sethhallcreative.com",
    },
  }}
  extend={{
    meta: [
      {
        name: "twitter:image",
        content: image,
      },
      { name: "twitter:title", content: { siteTitle } },
      {
        name: "twitter:description",
        content: { siteDescription },
      },
      {
        name: "twitter:card",
        content: "summary_large_image",
      },
    ],
  }}
/>
<script is:inline>
  // This code is inlined in the head to make dark mode instant & blocking.
  const setDarkMode = () => {
    const getThemePreference = () => {
      if (
        typeof localStorage !== "undefined" &&
        localStorage.getItem("theme")
      ) {
        return localStorage.getItem("theme");
      }
      return window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "light";
    };
    const isDark = getThemePreference() === "dark";
    document.documentElement.classList[isDark ? "add" : "remove"]("dark");

    if (typeof localStorage !== "undefined") {
      // Watch the document element and persist user preference when it changes.
      const observer = new MutationObserver(() => {
        const isDark = document.documentElement.classList.contains("dark");
        localStorage.setItem("theme", isDark ? "dark" : "light");
      });
      observer.observe(document.documentElement, {
        attributes: true,
        attributeFilter: ["class"],
      });
    }
  };

  setDarkMode();

  document.addEventListener("astro:after-swap", setDarkMode);
</script>
